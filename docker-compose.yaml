# x-anchors are ignored by Docker, are used for DRYness here
x-commcarehq_base: &commcarehq_base
  build:
    context: .
    dockerfile: "Dockerfile"
  environment: &environment_base
    COMMCAREHQ_BOOTSTRAP: "yes"
    DEPENDENT_SERVICES: "couch:5984 postgres:5432 redis:6379 elasticsearch2:9200 minio:9980 kafka:9092"
    DOCKER_HQ_OVERLAY: "${DOCKER_HQ_OVERLAY}"
    DOCKER_HQ_OVERLAYFS_CHMOD: "${DOCKER_HQ_OVERLAYFS_CHMOD}"
    DOCKER_HQ_OVERLAYFS_METACOPY: "${DOCKER_HQ_OVERLAYFS_METACOPY}"
  privileged: true  # allows mount inside container
  depends_on:
    postgres:
      condition: service_healthy
    couch:
      condition: service_healthy
    redis:
      condition: service_healthy
    elasticsearch2:
      condition: service_healthy
    #elasticsearch5
    kafka:
      condition: service_healthy
    zookeeper:
      condition: service_healthy
    minio:
      condition: service_healthy

services:
  web:
    <<: *commcarehq_base
    expose:
      - 8000
    ports:
      - "8000:8000"
    command:
      - su cchq -c "./manage.py runserver 0.0.0.0:8000"

  celery:
    <<: *commcarehq_base
    command:
      - su cchq -c "celery -A corehq worker -l info"

  pillowtop:
    <<: *commcarehq_base
    environment:
      <<: *environment_base
      KAFKA_ADVERTISED_HOST_NAME: kafka
    command:
      - su cchq -c "./manage.py run_ptop --all --processor-chunk-size=1"

  formplayer:
    image: dimagi/formplayer
    environment:
      COMMCARE_HOST: "http://host.docker.internal:8000"
      COMMCARE_ALTERNATE_ORIGINS: "http://localhost:8000,http://127.0.0.1:8000"
      AUTH_KEY: "secretkey"
      EXTERNAL_REQUEST_MODE: "replace-host"
    ports:
      - "8080:8080"
      - "8081:8081"
    expose:
      - "8080"
      - "8081"
    depends_on:
      - postgres
      - redis

  postgres:
    image: dimagi/docker-postgresql:latest
    environment:
      POSTGRES_USER: commcarehq
      POSTGRES_PASSWORD: commcarehq
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - $HOME/.local/share/dockerhq/postgresql:/var/lib/postgresql/data

  couch:
    image: dimagi/couchdb-dev:3.1.1
    command: ["--with-haproxy", "--with-admin-party-please", "-n", "1"]
    ulimits:
      # fix high CPU usage (1048576 is the default, tried 65536, 1024 fixed it)
      # https://groups.google.com/forum/#!topic/rabbitmq-users/hO06SB-QBqc
      nofile:
        soft: 1024
        hard: 1048576
    ports:
      - "5984:5984"
    expose:
      - "5984"
    volumes:
      - $HOME/.local/share/dockerhq/couchdb2:/usr/src/couchdb/dev/lib/node1/data

  redis:
    image: redis:6.2
    ports:
      - "6379:6379"
    expose:
      - "6379"
    volumes:
      - $HOME/.local/share/dockerhq/redis:/data

  elasticsearch2:
    image: elasticsearch:2.4.6
    # TODO: $ES_CLUSTER_NAME = `hostname`
    command: elasticsearch --cluster.name=baldr
    environment:
      ES_CLUSTER_NAME: baldr
      ES_JAVA_OPTS: "-Des.script.engine.groovy.inline.aggs=true -Des.script.engine.groovy.inline.search=true"
    expose:
      - "9200"
    volumes:
      - $HOME/.local/share/dockerhq/elasticsearch2:/usr/share/elasticsearch/data
      - ./files/elasticsearch_2.yml:/usr/share/elasticsearch/config/elasticsearch.yml:rw

#  elasticsearch5:
#    image: elasticsearch:5.6.16
#    command: elasticsearch
#    environment:
#      ES_CLUSTER_NAME: ${ES_CLUSTER_NAME}
#      ES_JAVA_OPTS: "-Xms750m -Xmx750m -Des.script.engine.groovy.inline.aggs=true -Des.script.engine.groovy.inline.search=true"
#    ports:
#      - "9205:9200"
#    expose:
#      - "9200"
#    volumes:
#      - $HOME/.local/share/dockerhq/elasticsearch5:/usr/share/elasticsearch/data
#      - ./files/elasticsearch_5.yml:/usr/share/elasticsearch/config/elasticsearch.yml:rw

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    volumes:
      - $HOME/.local/share/dockerhq/zookeeper:/opt/zookeeper-3.4.13/data

  kafka:
    image: wurstmeister/kafka:2.13-2.6.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_PORT: 9092
      CUSTOM_INIT_SCRIPT: |
        URL="https://raw.githubusercontent.com/vishnubob/wait-for-it/c096cface5fbd9f2d6b037391dfecae6fde1362e/wait-for-it.sh"
        if curl --max-time 10 $$URL > wait.sh ; then
          chmod +x ./wait.sh
          ./wait.sh -t 30 zookeeper:2181 || exit 1
        else
          echo "Wait script download failed"
        fi
#      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/.local/share/dockerhq/kafka:/kafka/kafka-logs-1

  minio:
    image: minio/minio
    command: server --address :9980 /data
    ports:
      - "9980:9980"
    expose:
      - "9980"
    volumes:
      - $HOME/.local/share/dockerhq/minio-conf:/root/.minio
      - $HOME/.local/share/dockerhq/minio-data:/data
    environment:
      MINIO_ACCESS_KEY: admin-key
      MINIO_SECRET_KEY: admin-secret
